// Code generated by go-swagger; DO NOT EDIT.

package key

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// TrackInfoHandlerFunc turns a function with the right signature into a track info handler
type TrackInfoHandlerFunc func(TrackInfoParams) middleware.Responder

// Handle executing the request and returning a response
func (fn TrackInfoHandlerFunc) Handle(params TrackInfoParams) middleware.Responder {
	return fn(params)
}

// TrackInfoHandler interface for that can handle valid track info params
type TrackInfoHandler interface {
	Handle(TrackInfoParams) middleware.Responder
}

// NewTrackInfo creates a new http.Handler for the track info operation
func NewTrackInfo(ctx *middleware.Context, handler TrackInfoHandler) *TrackInfo {
	return &TrackInfo{Context: ctx, Handler: handler}
}

/*TrackInfo swagger:route GET /{speakerName}/trackInfo key device trackInfo

Get more information on what is currently played

*/
type TrackInfo struct {
	Context *middleware.Context
	Handler TrackInfoHandler
}

func (o *TrackInfo) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewTrackInfoParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
