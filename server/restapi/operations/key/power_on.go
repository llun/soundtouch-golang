// Code generated by go-swagger; DO NOT EDIT.

package key

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PowerOnHandlerFunc turns a function with the right signature into a power on handler
type PowerOnHandlerFunc func(PowerOnParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PowerOnHandlerFunc) Handle(params PowerOnParams) middleware.Responder {
	return fn(params)
}

// PowerOnHandler interface for that can handle valid power on params
type PowerOnHandler interface {
	Handle(PowerOnParams) middleware.Responder
}

// NewPowerOn creates a new http.Handler for the power on operation
func NewPowerOn(ctx *middleware.Context, handler PowerOnHandler) *PowerOn {
	return &PowerOn{Context: ctx, Handler: handler}
}

/*PowerOn swagger:route GET /{speakerName}/powerOn key powerOn

powers on a device

*/
type PowerOn struct {
	Context *middleware.Context
	Handler PowerOnHandler
}

func (o *PowerOn) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPowerOnParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
