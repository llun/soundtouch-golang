// Code generated by go-swagger; DO NOT EDIT.

package key

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PlayPauseHandlerFunc turns a function with the right signature into a play pause handler
type PlayPauseHandlerFunc func(PlayPauseParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PlayPauseHandlerFunc) Handle(params PlayPauseParams) middleware.Responder {
	return fn(params)
}

// PlayPauseHandler interface for that can handle valid play pause params
type PlayPauseHandler interface {
	Handle(PlayPauseParams) middleware.Responder
}

// NewPlayPause creates a new http.Handler for the play pause operation
func NewPlayPause(ctx *middleware.Context, handler PlayPauseHandler) *PlayPause {
	return &PlayPause{Context: ctx, Handler: handler}
}

/*PlayPause swagger:route GET /{speakerName}/playPause key playPause

This method will play if the device was paused or pause when it was playing.

*/
type PlayPause struct {
	Context *middleware.Context
	Handler PlayPauseHandler
}

func (o *PlayPause) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPlayPauseParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
