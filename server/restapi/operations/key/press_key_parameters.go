// Code generated by go-swagger; DO NOT EDIT.

package key

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// NewPressKeyParams creates a new PressKeyParams object
// no default values defined in spec.
func NewPressKeyParams() PressKeyParams {

	return PressKeyParams{}
}

// PressKeyParams contains all the bound params for the press key operation
// typically these are obtained from a http.Request
//
// swagger:parameters pressKey
type PressKeyParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*
	  Required: true
	  In: path
	*/
	KeyID string
	/*The name of device
	  Required: true
	  In: path
	*/
	SpeakerName string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewPressKeyParams() beforehand.
func (o *PressKeyParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	rKeyID, rhkKeyID, _ := route.Params.GetOK("keyId")
	if err := o.bindKeyID(rKeyID, rhkKeyID, route.Formats); err != nil {
		res = append(res, err)
	}

	rSpeakerName, rhkSpeakerName, _ := route.Params.GetOK("speakerName")
	if err := o.bindSpeakerName(rSpeakerName, rhkSpeakerName, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindKeyID binds and validates parameter KeyID from path.
func (o *PressKeyParams) bindKeyID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	o.KeyID = raw

	if err := o.validateKeyID(formats); err != nil {
		return err
	}

	return nil
}

// validateKeyID carries on validations for parameter KeyID
func (o *PressKeyParams) validateKeyID(formats strfmt.Registry) error {

	if err := validate.EnumCase("keyId", "path", o.KeyID, []interface{}{"PLAY", "PAUSE", "PREV_TRACK", "NEXT_TRACK", "POWER", "MUTE", "PRESET_1", "PRESET_2", "PRESET_3", "PRESET_4", "PRESET_5", "PRESET_6", "SHUFFLE_OFF", "SHUFFLE_ON", "REPEAT_OFF", "REPEAT_ONE", "REPEAT_ALL", "PLAY_PAUSE", "ADD_FAVORITE", "REMOVE_FAVORITE", "BOOKMARK", "THUMBS_UP", "THUMBS_DOWN"}, true); err != nil {
		return err
	}

	return nil
}

// bindSpeakerName binds and validates parameter SpeakerName from path.
func (o *PressKeyParams) bindSpeakerName(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	o.SpeakerName = raw

	return nil
}
