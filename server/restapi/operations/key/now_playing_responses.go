// Code generated by go-swagger; DO NOT EDIT.

package key

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/theovassiliou/soundtouch-golang/server/models"
)

// NowPlayingOKCode is the HTTP code returned for type NowPlayingOK
const NowPlayingOKCode int = 200

/*NowPlayingOK a JSON A JSON object indicting what is being played. Returns information both in Standby and PoweredOn mode

swagger:response nowPlayingOK
*/
type NowPlayingOK struct {

	/*
	  In: Body
	*/
	Payload models.BObject `json:"body,omitempty"`
}

// NewNowPlayingOK creates NowPlayingOK with default headers values
func NewNowPlayingOK() *NowPlayingOK {

	return &NowPlayingOK{}
}

// WithPayload adds the payload to the now playing o k response
func (o *NowPlayingOK) WithPayload(payload models.BObject) *NowPlayingOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the now playing o k response
func (o *NowPlayingOK) SetPayload(payload models.BObject) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *NowPlayingOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

/*NowPlayingDefault generic error response

swagger:response nowPlayingDefault
*/
type NowPlayingDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewNowPlayingDefault creates NowPlayingDefault with default headers values
func NewNowPlayingDefault(code int) *NowPlayingDefault {
	if code <= 0 {
		code = 500
	}

	return &NowPlayingDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the now playing default response
func (o *NowPlayingDefault) WithStatusCode(code int) *NowPlayingDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the now playing default response
func (o *NowPlayingDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the now playing default response
func (o *NowPlayingDefault) WithPayload(payload *models.Error) *NowPlayingDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the now playing default response
func (o *NowPlayingDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *NowPlayingDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
