// Code generated by go-swagger; DO NOT EDIT.

package key

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/theovassiliou/soundtouch-golang/server/models"
)

// TrackInfoOKCode is the HTTP code returned for type TrackInfoOK
const TrackInfoOKCode int = 200

/*TrackInfoOK a JSON A JSON object indicting what is being played. Returns information both in Standby and PoweredOn mode

swagger:response trackInfoOK
*/
type TrackInfoOK struct {

	/*
	  In: Body
	*/
	Payload models.BObject `json:"body,omitempty"`
}

// NewTrackInfoOK creates TrackInfoOK with default headers values
func NewTrackInfoOK() *TrackInfoOK {

	return &TrackInfoOK{}
}

// WithPayload adds the payload to the track info o k response
func (o *TrackInfoOK) WithPayload(payload models.BObject) *TrackInfoOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the track info o k response
func (o *TrackInfoOK) SetPayload(payload models.BObject) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *TrackInfoOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

/*TrackInfoDefault generic error response

swagger:response trackInfoDefault
*/
type TrackInfoDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewTrackInfoDefault creates TrackInfoDefault with default headers values
func NewTrackInfoDefault(code int) *TrackInfoDefault {
	if code <= 0 {
		code = 500
	}

	return &TrackInfoDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the track info default response
func (o *TrackInfoDefault) WithStatusCode(code int) *TrackInfoDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the track info default response
func (o *TrackInfoDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the track info default response
func (o *TrackInfoDefault) WithPayload(payload *models.Error) *TrackInfoDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the track info default response
func (o *TrackInfoDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *TrackInfoDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
