// Code generated by go-swagger; DO NOT EDIT.

package device

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ListAdvancedHandlerFunc turns a function with the right signature into a list advanced handler
type ListAdvancedHandlerFunc func(ListAdvancedParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ListAdvancedHandlerFunc) Handle(params ListAdvancedParams) middleware.Responder {
	return fn(params)
}

// ListAdvancedHandler interface for that can handle valid list advanced params
type ListAdvancedHandler interface {
	Handle(ListAdvancedParams) middleware.Responder
}

// NewListAdvanced creates a new http.Handler for the list advanced operation
func NewListAdvanced(ctx *middleware.Context, handler ListAdvancedHandler) *ListAdvanced {
	return &ListAdvanced{Context: ctx, Handler: handler}
}

/*ListAdvanced swagger:route GET /device/listAdvanced device listAdvanced

This url will return a JSON object with the found soundtouch devices on your network. When unplugging one of your soundtouches, the device will not be in the list when making a new requests. Even the soundtouches that are powered off are returned. This advanced view will display all information known about the soundtouch.

*/
type ListAdvanced struct {
	Context *middleware.Context
	Handler ListAdvancedHandler
}

func (o *ListAdvanced) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewListAdvancedParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
