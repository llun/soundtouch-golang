// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/loads"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/runtime/security"
	"github.com/go-openapi/spec"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	apiops "github.com/theovassiliou/soundtouch-golang/server/restapi/operations/api"
	"github.com/theovassiliou/soundtouch-golang/server/restapi/operations/device"
	"github.com/theovassiliou/soundtouch-golang/server/restapi/operations/key"
)

// NewSoundtouchRESTfulJSONServerAPI creates a new SoundtouchRESTfulJSONServer instance
func NewSoundtouchRESTfulJSONServerAPI(spec *loads.Document) *SoundtouchRESTfulJSONServerAPI {
	return &SoundtouchRESTfulJSONServerAPI{
		handlers:            make(map[string]map[string]http.Handler),
		formats:             strfmt.Default,
		defaultConsumes:     "application/json",
		defaultProduces:     "application/json",
		customConsumers:     make(map[string]runtime.Consumer),
		customProducers:     make(map[string]runtime.Producer),
		PreServerShutdown:   func() {},
		ServerShutdown:      func() {},
		spec:                spec,
		ServeError:          errors.ServeError,
		BasicAuthenticator:  security.BasicAuth,
		APIKeyAuthenticator: security.APIKeyAuth,
		BearerAuthenticator: security.BearerAuth,

		JSONConsumer: runtime.JSONConsumer(),

		JSONProducer: runtime.JSONProducer(),

		APIKeysListHandler: apiops.KeysListHandlerFunc(func(params apiops.KeysListParams) middleware.Responder {
			return middleware.NotImplemented("operation api.KeysList has not yet been implemented")
		}),
		DeviceListHandler: device.ListHandlerFunc(func(params device.ListParams) middleware.Responder {
			return middleware.NotImplemented("operation device.List has not yet been implemented")
		}),
		DeviceListAdvancedHandler: device.ListAdvancedHandlerFunc(func(params device.ListAdvancedParams) middleware.Responder {
			return middleware.NotImplemented("operation device.ListAdvanced has not yet been implemented")
		}),
		KeyNowPlayingHandler: key.NowPlayingHandlerFunc(func(params key.NowPlayingParams) middleware.Responder {
			return middleware.NotImplemented("operation key.NowPlaying has not yet been implemented")
		}),
		KeyPlayHandler: key.PlayHandlerFunc(func(params key.PlayParams) middleware.Responder {
			return middleware.NotImplemented("operation key.Play has not yet been implemented")
		}),
		KeyPlayPauseHandler: key.PlayPauseHandlerFunc(func(params key.PlayPauseParams) middleware.Responder {
			return middleware.NotImplemented("operation key.PlayPause has not yet been implemented")
		}),
		KeyPowerOffHandler: key.PowerOffHandlerFunc(func(params key.PowerOffParams) middleware.Responder {
			return middleware.NotImplemented("operation key.PowerOff has not yet been implemented")
		}),
		KeyPowerOnHandler: key.PowerOnHandlerFunc(func(params key.PowerOnParams) middleware.Responder {
			return middleware.NotImplemented("operation key.PowerOn has not yet been implemented")
		}),
		KeyPresetsHandler: key.PresetsHandlerFunc(func(params key.PresetsParams) middleware.Responder {
			return middleware.NotImplemented("operation key.Presets has not yet been implemented")
		}),
		KeyPressKeyHandler: key.PressKeyHandlerFunc(func(params key.PressKeyParams) middleware.Responder {
			return middleware.NotImplemented("operation key.PressKey has not yet been implemented")
		}),
		KeyTrackInfoHandler: key.TrackInfoHandlerFunc(func(params key.TrackInfoParams) middleware.Responder {
			return middleware.NotImplemented("operation key.TrackInfo has not yet been implemented")
		}),
	}
}

/*SoundtouchRESTfulJSONServerAPI This applications implements a RESTful/json based API for the soundtouch system.
It's implemented as an API which is described by this swagger spec document.

The server discovers automatically all Soundtouch devices present in the LAN.
It's intend is to ease the communication with Boses Soundtouch system.
*/
type SoundtouchRESTfulJSONServerAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	customConsumers map[string]runtime.Consumer
	customProducers map[string]runtime.Producer
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator
	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator
	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// JSONConsumer registers a consumer for the following mime types:
	//   - application/berlin.vassiliou-pohl.soundtouch-golang.v1+json
	JSONConsumer runtime.Consumer

	// JSONProducer registers a producer for the following mime types:
	//   - application/berlin.vassiliou-pohl.soundtouch-golang.v1+json
	JSONProducer runtime.Producer

	// APIKeysListHandler sets the operation handler for the keys list operation
	APIKeysListHandler apiops.KeysListHandler
	// DeviceListHandler sets the operation handler for the list operation
	DeviceListHandler device.ListHandler
	// DeviceListAdvancedHandler sets the operation handler for the list advanced operation
	DeviceListAdvancedHandler device.ListAdvancedHandler
	// KeyNowPlayingHandler sets the operation handler for the now playing operation
	KeyNowPlayingHandler key.NowPlayingHandler
	// KeyPlayHandler sets the operation handler for the play operation
	KeyPlayHandler key.PlayHandler
	// KeyPlayPauseHandler sets the operation handler for the play pause operation
	KeyPlayPauseHandler key.PlayPauseHandler
	// KeyPowerOffHandler sets the operation handler for the power off operation
	KeyPowerOffHandler key.PowerOffHandler
	// KeyPowerOnHandler sets the operation handler for the power on operation
	KeyPowerOnHandler key.PowerOnHandler
	// KeyPresetsHandler sets the operation handler for the presets operation
	KeyPresetsHandler key.PresetsHandler
	// KeyPressKeyHandler sets the operation handler for the press key operation
	KeyPressKeyHandler key.PressKeyHandler
	// KeyTrackInfoHandler sets the operation handler for the track info operation
	KeyTrackInfoHandler key.TrackInfoHandler
	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// PreServerShutdown is called before the HTTP(S) server is shutdown
	// This allows for custom functions to get executed before the HTTP(S) server stops accepting traffic
	PreServerShutdown func()

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// SetDefaultProduces sets the default produces media type
func (o *SoundtouchRESTfulJSONServerAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *SoundtouchRESTfulJSONServerAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *SoundtouchRESTfulJSONServerAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *SoundtouchRESTfulJSONServerAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *SoundtouchRESTfulJSONServerAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *SoundtouchRESTfulJSONServerAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *SoundtouchRESTfulJSONServerAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the SoundtouchRESTfulJSONServerAPI
func (o *SoundtouchRESTfulJSONServerAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}

	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.APIKeysListHandler == nil {
		unregistered = append(unregistered, "api.KeysListHandler")
	}
	if o.DeviceListHandler == nil {
		unregistered = append(unregistered, "device.ListHandler")
	}
	if o.DeviceListAdvancedHandler == nil {
		unregistered = append(unregistered, "device.ListAdvancedHandler")
	}
	if o.KeyNowPlayingHandler == nil {
		unregistered = append(unregistered, "key.NowPlayingHandler")
	}
	if o.KeyPlayHandler == nil {
		unregistered = append(unregistered, "key.PlayHandler")
	}
	if o.KeyPlayPauseHandler == nil {
		unregistered = append(unregistered, "key.PlayPauseHandler")
	}
	if o.KeyPowerOffHandler == nil {
		unregistered = append(unregistered, "key.PowerOffHandler")
	}
	if o.KeyPowerOnHandler == nil {
		unregistered = append(unregistered, "key.PowerOnHandler")
	}
	if o.KeyPresetsHandler == nil {
		unregistered = append(unregistered, "key.PresetsHandler")
	}
	if o.KeyPressKeyHandler == nil {
		unregistered = append(unregistered, "key.PressKeyHandler")
	}
	if o.KeyTrackInfoHandler == nil {
		unregistered = append(unregistered, "key.TrackInfoHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *SoundtouchRESTfulJSONServerAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *SoundtouchRESTfulJSONServerAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {
	return nil
}

// Authorizer returns the registered authorizer
func (o *SoundtouchRESTfulJSONServerAPI) Authorizer() runtime.Authorizer {
	return nil
}

// ConsumersFor gets the consumers for the specified media types.
// MIME type parameters are ignored here.
func (o *SoundtouchRESTfulJSONServerAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {
	result := make(map[string]runtime.Consumer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/berlin.vassiliou-pohl.soundtouch-golang.v1+json":
			result["application/berlin.vassiliou-pohl.soundtouch-golang.v1+json"] = o.JSONConsumer
		}

		if c, ok := o.customConsumers[mt]; ok {
			result[mt] = c
		}
	}
	return result
}

// ProducersFor gets the producers for the specified media types.
// MIME type parameters are ignored here.
func (o *SoundtouchRESTfulJSONServerAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {
	result := make(map[string]runtime.Producer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/berlin.vassiliou-pohl.soundtouch-golang.v1+json":
			result["application/berlin.vassiliou-pohl.soundtouch-golang.v1+json"] = o.JSONProducer
		}

		if p, ok := o.customProducers[mt]; ok {
			result[mt] = p
		}
	}
	return result
}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *SoundtouchRESTfulJSONServerAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the soundtouch r e s tful JSON server API
func (o *SoundtouchRESTfulJSONServerAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *SoundtouchRESTfulJSONServerAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened
	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/keys-list"] = apiops.NewKeysList(o.context, o.APIKeysListHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/device/list"] = device.NewList(o.context, o.DeviceListHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/device/listAdvanced"] = device.NewListAdvanced(o.context, o.DeviceListAdvancedHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/{speakerName}/nowPlaying"] = key.NewNowPlaying(o.context, o.KeyNowPlayingHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/{speakerName}/play"] = key.NewPlay(o.context, o.KeyPlayHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/{speakerName}/playPause"] = key.NewPlayPause(o.context, o.KeyPlayPauseHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/{speakerName}/powerOff"] = key.NewPowerOff(o.context, o.KeyPowerOffHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/{speakerName}/powerOn"] = key.NewPowerOn(o.context, o.KeyPowerOnHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/{speakerName}/presets"] = key.NewPresets(o.context, o.KeyPresetsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/{speakerName}/key/{keyId}"] = key.NewPressKey(o.context, o.KeyPressKeyHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/{speakerName}/trackInfo"] = key.NewTrackInfo(o.context, o.KeyTrackInfoHandler)
}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *SoundtouchRESTfulJSONServerAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middleware as you see fit
func (o *SoundtouchRESTfulJSONServerAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}

// RegisterConsumer allows you to add (or override) a consumer for a media type.
func (o *SoundtouchRESTfulJSONServerAPI) RegisterConsumer(mediaType string, consumer runtime.Consumer) {
	o.customConsumers[mediaType] = consumer
}

// RegisterProducer allows you to add (or override) a producer for a media type.
func (o *SoundtouchRESTfulJSONServerAPI) RegisterProducer(mediaType string, producer runtime.Producer) {
	o.customProducers[mediaType] = producer
}

// AddMiddlewareFor adds a http middleware to existing handler
func (o *SoundtouchRESTfulJSONServerAPI) AddMiddlewareFor(method, path string, builder middleware.Builder) {
	um := strings.ToUpper(method)
	if path == "/" {
		path = ""
	}
	o.Init()
	if h, ok := o.handlers[um][path]; ok {
		o.handlers[method][path] = builder(h)
	}
}
