// Code generated by go-swagger; DO NOT EDIT.

package api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// KeysListHandlerFunc turns a function with the right signature into a keys list handler
type KeysListHandlerFunc func(KeysListParams) middleware.Responder

// Handle executing the request and returning a response
func (fn KeysListHandlerFunc) Handle(params KeysListParams) middleware.Responder {
	return fn(params)
}

// KeysListHandler interface for that can handle valid keys list params
type KeysListHandler interface {
	Handle(KeysListParams) middleware.Responder
}

// NewKeysList creates a new http.Handler for the keys list operation
func NewKeysList(ctx *middleware.Context, handler KeysListHandler) *KeysList {
	return &KeysList{Context: ctx, Handler: handler}
}

/*KeysList swagger:route GET /api/keys-list API keysList

This method will get all possible keys. These keys can be used in the '/{deviceName}/key/{key}' to replace the {key} placeholder.

*/
type KeysList struct {
	Context *middleware.Context
	Handler KeysListHandler
}

func (o *KeysList) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewKeysListParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
